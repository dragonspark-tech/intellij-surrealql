// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: SurrealQL.flex

package io.dragonspark.surrealql.language;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;
import io.dragonspark.surrealql.language.psi.SurrealQLTypes;


class SurrealQLLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IN_BLOCK_COMMENT = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\36\u0200\1\u0300\1\u0400\1\u0500\265\u0200\10\u0600"+
    "\u1020\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\2\22\0\1\5"+
    "\1\6\1\7\1\0\1\10\1\0\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\12\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\44"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\44\1\61"+
    "\1\44\1\62\1\63\1\64\1\0\1\65\1\66\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\44"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\44\1\61"+
    "\1\44\1\67\1\70\1\71\1\72\6\0\1\3\121\0"+
    "\1\73\37\0\1\73\70\0\2\74\115\0\1\75\u01a8\0"+
    "\2\3\u0100\0\1\76\335\0\2\73\1\0\2\73\165\0"+
    "\5\73\171\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1792];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\4\1\1\4\1\5\2\3"+
    "\1\6\2\3\1\7\1\10\2\3\2\1\17\11\1\12"+
    "\1\13\1\1\1\14\1\1\1\15\3\1\2\16\1\0"+
    "\1\17\1\0\1\20\2\0\1\21\1\22\2\0\13\11"+
    "\3\3\1\11\1\0\2\11\1\0\1\11\1\3\10\11"+
    "\3\0\1\11\1\0\1\3\3\0\1\23\1\24\1\0"+
    "\13\11\1\25\1\0\3\11\2\0\1\11\1\0\12\11"+
    "\1\0\1\25\1\11\7\0\2\11\1\0\1\11\1\0"+
    "\6\11\2\0\2\11\1\0\1\11\3\0\1\11\1\0"+
    "\4\11\4\0\1\24\1\0\1\11\3\0\2\11\2\0"+
    "\1\11\1\0\1\11\2\0\1\11\3\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\2\3\1\11\1\0\2\11\2\0\1\11"+
    "\1\0\3\11\3\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[217];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\77\0\176\0\275\0\374\0\u013b\0\u017a\0\u01b9"+
    "\0\u01f8\0\u0237\0\176\0\176\0\u0276\0\176\0\176\0\u02b5"+
    "\0\u02f4\0\u0333\0\176\0\u0372\0\u03b1\0\u03f0\0\u042f\0\u046e"+
    "\0\u04ad\0\u04ec\0\u052b\0\u056a\0\u05a9\0\u05e8\0\u0627\0\u0666"+
    "\0\u06a5\0\u06e4\0\u0723\0\u0762\0\u07a1\0\u07e0\0\176\0\176"+
    "\0\u081f\0\176\0\u085e\0\176\0\u089d\0\u08dc\0\u091b\0\176"+
    "\0\u095a\0\u017a\0\176\0\u0999\0\u09d8\0\u0237\0\u0a17\0\u0a56"+
    "\0\176\0\u0a95\0\u0ad4\0\u0b13\0\u0b52\0\u0b91\0\u0bd0\0\u0c0f"+
    "\0\u0c4e\0\u0c8d\0\u0ccc\0\u0d0b\0\u0d4a\0\u0d89\0\u0dc8\0\u0e07"+
    "\0\u0e46\0\u0e85\0\u0ec4\0\u0f03\0\u0f42\0\u0f81\0\u0fc0\0\u056a"+
    "\0\u0fff\0\u103e\0\u107d\0\u10bc\0\u10fb\0\u113a\0\u1179\0\u11b8"+
    "\0\u11f7\0\u081f\0\u1236\0\176\0\u1275\0\u12b4\0\u12f3\0\u1332"+
    "\0\u1371\0\176\0\u13b0\0\u13ef\0\u142e\0\u146d\0\u14ac\0\u14eb"+
    "\0\u152a\0\u1569\0\u15a8\0\u15e7\0\u1626\0\u1665\0\u16a4\0\u056a"+
    "\0\u16e3\0\u1722\0\u1761\0\u17a0\0\u17df\0\u181e\0\u185d\0\u189c"+
    "\0\u18db\0\u191a\0\u1959\0\u1998\0\u19d7\0\u1a16\0\u1a55\0\u1a94"+
    "\0\u1ad3\0\u1b12\0\u1b51\0\176\0\u081f\0\u1b90\0\u1bcf\0\u1c0e"+
    "\0\u1c4d\0\u1c8c\0\u1ccb\0\u1d0a\0\u1d49\0\u1d88\0\u1dc7\0\u1e06"+
    "\0\u1e45\0\u1e84\0\u1ec3\0\u1f02\0\u1f41\0\u1f80\0\u1fbf\0\u1ffe"+
    "\0\u203d\0\u207c\0\u20bb\0\u20fa\0\u2139\0\u2178\0\u21b7\0\u21f6"+
    "\0\u2235\0\u2274\0\u22b3\0\u22f2\0\u2331\0\u2370\0\u23af\0\u23ee"+
    "\0\u242d\0\u246c\0\u246c\0\u24ab\0\u24ea\0\u2529\0\u2568\0\u25a7"+
    "\0\u25e6\0\u2625\0\u2664\0\u26a3\0\u26e2\0\u2721\0\u2760\0\u279f"+
    "\0\u27de\0\u281d\0\u285c\0\u289b\0\u28da\0\u2919\0\u2958\0\u2997"+
    "\0\u29d6\0\u2a15\0\u2a54\0\u2a93\0\u2ad2\0\u2b11\0\u2b50\0\u2b8f"+
    "\0\u2bce\0\u2c0d\0\u2c4c\0\u2c8b\0\u2cca\0\u2d09\0\u2d48\0\u2d87"+
    "\0\u2dc6\0\u2e05\0\u2e44\0\u2e83\0\u2ec2\0\u2f01\0\u2f40\0\u2f7f"+
    "\0\u2fbe";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[217];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\3\2\4\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\3\1\21\1\22\1\3\1\23\1\24\2\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\2\34"+
    "\1\36\1\34\1\37\1\40\1\34\1\41\1\42\1\34"+
    "\1\43\1\44\1\45\1\46\3\34\1\47\1\3\1\50"+
    "\1\3\1\51\1\52\1\53\1\54\2\16\1\55\1\56"+
    "\1\57\15\60\1\61\61\60\100\0\1\4\2\0\2\4"+
    "\73\0\1\5\102\0\1\16\20\0\1\16\42\0\1\16"+
    "\4\0\7\62\1\63\53\62\1\64\13\62\33\0\27\65"+
    "\26\0\1\16\65\0\12\66\1\63\50\66\1\67\13\66"+
    "\15\0\1\16\11\0\1\16\42\0\1\16\24\0\1\70"+
    "\73\0\1\71\102\0\1\72\1\0\1\22\102\0\1\16"+
    "\40\0\1\16\35\0\1\16\73\0\1\16\2\0\1\16"+
    "\1\0\1\16\77\0\1\16\27\0\1\73\37\0\1\34"+
    "\7\0\2\34\1\74\10\34\1\75\1\34\1\76\11\34"+
    "\3\0\1\34\34\0\1\34\7\0\4\34\1\77\13\34"+
    "\1\100\6\34\3\0\1\34\34\0\1\34\7\0\1\101"+
    "\15\34\1\102\1\34\1\103\6\34\3\0\1\34\34\0"+
    "\1\34\7\0\4\34\1\104\22\34\3\0\1\34\34\0"+
    "\1\34\7\0\27\34\3\0\1\34\34\0\1\34\7\0"+
    "\16\34\1\105\10\34\3\0\1\34\34\0\1\34\7\0"+
    "\5\34\1\106\7\34\1\107\3\34\1\110\5\34\3\0"+
    "\1\34\7\0\1\111\24\0\1\34\7\0\10\34\1\112"+
    "\16\34\3\0\1\34\6\0\1\113\25\0\1\34\7\0"+
    "\4\34\1\114\3\34\1\115\16\34\3\0\1\34\6\0"+
    "\1\116\25\0\1\34\7\0\16\34\1\117\10\34\3\0"+
    "\1\34\34\0\1\34\7\0\20\34\1\120\2\34\1\121"+
    "\3\34\3\0\1\34\34\0\1\34\7\0\4\34\1\122"+
    "\22\34\3\0\1\34\34\0\1\34\7\0\4\34\1\123"+
    "\2\34\1\124\3\34\1\125\13\34\3\0\1\34\34\0"+
    "\1\34\7\0\7\34\1\126\17\34\3\0\1\34\34\0"+
    "\1\34\7\0\17\34\1\127\1\34\1\130\5\34\3\0"+
    "\1\34\7\0\1\131\1\0\63\132\1\133\2\132\1\134"+
    "\10\132\30\0\1\16\37\0\1\16\46\0\1\135\7\0"+
    "\1\136\3\0\1\111\20\0\1\111\40\0\1\137\2\0"+
    "\1\140\3\0\1\141\73\0\1\113\30\0\1\113\24\0"+
    "\1\142\54\0\2\62\3\0\72\62\23\0\1\65\7\0"+
    "\27\65\3\0\1\65\11\0\2\66\3\0\72\66\2\70"+
    "\1\0\74\70\23\0\1\143\126\0\1\144\46\0\1\34"+
    "\7\0\2\34\1\145\24\34\3\0\1\34\34\0\1\34"+
    "\7\0\13\34\1\146\6\34\1\147\4\34\3\0\1\34"+
    "\34\0\1\34\7\0\3\34\1\120\22\34\1\146\3\0"+
    "\1\34\34\0\1\34\7\0\6\34\1\150\20\34\3\0"+
    "\1\34\34\0\1\34\7\0\4\34\1\151\22\34\3\0"+
    "\1\34\34\0\1\34\7\0\15\34\1\152\11\34\3\0"+
    "\1\34\34\0\1\34\7\0\14\34\1\153\1\154\11\34"+
    "\3\0\1\34\34\0\1\34\7\0\4\34\1\155\22\34"+
    "\3\0\1\34\34\0\1\34\7\0\5\34\1\156\5\34"+
    "\1\157\13\34\3\0\1\34\34\0\1\34\7\0\20\34"+
    "\1\160\6\34\3\0\1\34\16\0\1\161\15\0\1\34"+
    "\7\0\27\34\3\0\1\34\34\0\1\34\7\0\5\34"+
    "\1\162\13\34\1\163\1\164\4\34\3\0\1\34\7\0"+
    "\1\165\6\0\1\166\15\0\1\34\7\0\27\34\3\0"+
    "\1\34\16\0\1\166\114\0\1\34\7\0\13\34\1\167"+
    "\13\34\3\0\1\34\57\0\1\170\53\0\1\34\7\0"+
    "\22\34\1\160\4\34\3\0\1\34\34\0\1\34\7\0"+
    "\24\34\1\130\2\34\3\0\1\34\70\0\1\131\42\0"+
    "\1\34\7\0\15\34\1\171\4\34\1\172\4\34\3\0"+
    "\1\34\34\0\1\34\7\0\22\34\1\173\4\34\3\0"+
    "\1\34\34\0\1\34\7\0\1\34\1\174\11\34\1\155"+
    "\1\175\5\34\1\176\4\34\3\0\1\34\34\0\1\34"+
    "\7\0\13\34\1\177\13\34\3\0\1\34\34\0\1\34"+
    "\7\0\16\34\1\200\10\34\3\0\1\34\34\0\1\34"+
    "\7\0\4\34\1\201\22\34\3\0\1\34\34\0\1\34"+
    "\7\0\20\34\1\124\6\34\3\0\1\34\34\0\1\34"+
    "\7\0\3\34\1\155\15\34\1\202\5\34\3\0\1\34"+
    "\7\0\1\203\24\0\1\34\7\0\4\34\1\160\22\34"+
    "\3\0\1\34\50\0\1\204\37\0\63\132\1\133\2\132"+
    "\1\205\10\132\5\0\1\161\131\0\1\206\13\0\1\165"+
    "\1\207\17\0\1\165\47\0\1\210\101\0\1\211\64\0"+
    "\1\212\62\0\1\143\13\0\1\213\76\0\1\214\62\0"+
    "\1\34\7\0\4\34\1\215\22\34\3\0\1\34\34\0"+
    "\1\34\7\0\10\34\1\216\16\34\3\0\1\34\6\0"+
    "\1\217\25\0\1\34\7\0\4\34\1\105\22\34\3\0"+
    "\1\34\34\0\1\34\7\0\10\34\1\220\16\34\3\0"+
    "\1\34\6\0\1\221\25\0\1\34\7\0\1\222\26\34"+
    "\3\0\1\34\34\0\1\34\7\0\2\34\1\223\24\34"+
    "\3\0\1\34\34\0\1\34\7\0\14\34\1\224\12\34"+
    "\3\0\1\34\34\0\1\34\7\0\22\34\1\225\4\34"+
    "\3\0\1\34\34\0\1\34\7\0\1\226\26\34\3\0"+
    "\1\34\34\0\1\34\7\0\10\34\1\227\16\34\3\0"+
    "\1\34\6\0\1\230\25\0\1\34\7\0\4\34\1\226"+
    "\22\34\3\0\1\34\50\0\1\231\62\0\1\34\7\0"+
    "\16\34\1\160\10\34\3\0\1\34\34\0\1\34\7\0"+
    "\4\34\1\232\3\34\1\233\16\34\3\0\1\34\6\0"+
    "\1\234\25\0\1\34\7\0\4\34\1\235\22\34\3\0"+
    "\1\34\50\0\1\236\3\0\1\234\30\0\1\234\52\0"+
    "\1\237\51\0\1\34\7\0\13\34\1\160\13\34\3\0"+
    "\1\34\57\0\1\204\53\0\1\34\7\0\4\34\1\146"+
    "\22\34\3\0\1\34\16\0\1\240\15\0\1\34\7\0"+
    "\10\34\1\216\16\34\3\0\1\34\6\0\1\217\25\0"+
    "\1\34\7\0\21\34\1\241\5\34\3\0\1\34\7\0"+
    "\1\242\24\0\1\34\7\0\23\34\1\243\3\34\3\0"+
    "\1\34\34\0\1\34\7\0\16\34\1\115\10\34\3\0"+
    "\1\34\34\0\1\34\7\0\23\34\1\244\3\34\3\0"+
    "\1\34\34\0\1\34\7\0\4\34\1\245\22\34\3\0"+
    "\1\34\34\0\1\34\7\0\25\34\1\160\1\34\3\0"+
    "\1\34\34\0\1\34\7\0\4\34\1\246\22\34\3\0"+
    "\1\34\34\0\1\34\7\0\4\34\1\232\22\34\3\0"+
    "\1\34\50\0\1\236\110\0\1\204\64\0\1\247\76\0"+
    "\1\250\117\0\1\204\55\0\1\251\55\0\1\252\1\0"+
    "\1\252\2\0\1\253\113\0\1\254\61\0\1\34\7\0"+
    "\21\34\1\255\5\34\3\0\1\34\7\0\1\256\24\0"+
    "\1\34\7\0\15\34\1\173\11\34\3\0\1\34\61\0"+
    "\1\257\51\0\1\34\7\0\15\34\1\160\11\34\3\0"+
    "\1\34\61\0\1\204\51\0\1\34\7\0\12\34\1\160"+
    "\14\34\3\0\1\34\10\0\1\204\23\0\1\34\7\0"+
    "\4\34\1\167\22\34\3\0\1\34\34\0\1\34\7\0"+
    "\10\34\1\114\16\34\3\0\1\34\6\0\1\260\25\0"+
    "\1\34\7\0\1\261\7\34\1\262\16\34\3\0\1\34"+
    "\6\0\1\263\25\0\1\34\7\0\22\34\1\130\4\34"+
    "\3\0\1\34\34\0\1\34\7\0\15\34\1\130\11\34"+
    "\3\0\1\34\61\0\1\131\74\0\1\264\53\0\1\34"+
    "\7\0\20\34\1\114\6\34\3\0\1\34\34\0\1\34"+
    "\7\0\3\34\1\265\23\34\3\0\1\34\47\0\1\266"+
    "\63\0\1\34\7\0\20\34\1\267\6\34\3\0\1\34"+
    "\64\0\1\260\74\0\1\270\70\0\1\271\30\0\1\271"+
    "\25\0\1\34\7\0\10\34\1\233\16\34\3\0\1\34"+
    "\6\0\1\234\45\0\1\234\30\0\1\234\25\0\1\34"+
    "\7\0\10\34\1\272\16\34\3\0\1\34\6\0\1\273"+
    "\25\0\1\34\7\0\20\34\1\220\6\34\3\0\1\34"+
    "\34\0\1\34\7\0\2\34\1\114\24\34\3\0\1\34"+
    "\34\0\1\34\7\0\17\34\1\160\7\34\3\0\1\34"+
    "\64\0\1\274\60\0\1\260\113\0\1\204\47\0\1\253"+
    "\137\0\1\275\35\0\1\34\7\0\21\34\1\160\5\34"+
    "\3\0\1\34\7\0\1\204\55\0\1\204\20\0\1\204"+
    "\55\0\1\242\20\0\1\242\56\0\1\204\44\0\1\34"+
    "\7\0\10\34\1\276\16\34\3\0\1\34\6\0\1\277"+
    "\25\0\1\34\7\0\15\34\1\300\11\34\3\0\1\34"+
    "\61\0\1\301\102\0\1\131\20\0\1\131\24\0\1\34"+
    "\7\0\4\34\1\120\22\34\3\0\1\34\50\0\1\16"+
    "\62\0\1\34\7\0\21\34\1\302\5\34\3\0\1\34"+
    "\7\0\1\303\56\0\1\16\71\0\1\16\51\0\1\34"+
    "\7\0\13\34\1\304\13\34\3\0\1\34\57\0\1\305"+
    "\104\0\1\303\20\0\1\303\33\0\1\16\67\0\1\34"+
    "\7\0\15\34\1\306\11\34\3\0\1\34\61\0\1\307"+
    "\51\0\1\34\7\0\23\34\1\130\3\34\3\0\1\34"+
    "\67\0\1\131\43\0\1\34\7\0\4\34\1\310\22\34"+
    "\3\0\1\34\50\0\1\311\62\0\1\34\7\0\3\34"+
    "\1\160\23\34\3\0\1\34\47\0\1\204\63\0\1\34"+
    "\7\0\21\34\1\312\5\34\3\0\1\34\7\0\1\313"+
    "\55\0\1\313\20\0\1\313\24\0\1\34\7\0\2\34"+
    "\1\314\24\34\3\0\1\34\46\0\1\315\64\0\1\34"+
    "\7\0\1\316\14\34\1\317\11\34\3\0\1\34\44\0"+
    "\1\320\14\0\1\321\51\0\1\34\7\0\22\34\1\322"+
    "\4\34\3\0\1\34\66\0\1\323\44\0\1\34\7\0"+
    "\13\34\1\324\1\34\1\325\11\34\3\0\1\34\34\0"+
    "\1\34\7\0\16\34\1\326\10\34\3\0\1\34\57\0"+
    "\1\327\1\0\1\330\77\0\1\331\50\0\1\34\7\0"+
    "\21\34\1\120\5\34\3\0\1\34\7\0\1\16\55\0"+
    "\1\16\20\0\1\16\24\0\1\34\7\0\13\34\1\120"+
    "\13\34\3\0\1\34\34\0\1\34\7\0\26\34\1\120"+
    "\3\0\1\34\34\0\1\34\7\0\15\34\1\265\4\34"+
    "\1\120\4\34\3\0\1\34\57\0\1\16\111\0\1\16"+
    "\65\0\1\266\4\0\1\16\21\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[12285];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\7\1\2\11\1\1\2\11\3\1\1\11"+
    "\23\1\2\11\1\1\1\11\1\1\1\11\3\1\1\11"+
    "\1\1\1\0\1\11\1\0\1\1\2\0\1\1\1\11"+
    "\2\0\17\1\1\0\2\1\1\0\12\1\3\0\1\11"+
    "\1\0\1\1\3\0\1\11\1\1\1\0\14\1\1\0"+
    "\3\1\2\0\1\1\1\0\12\1\1\0\1\11\1\1"+
    "\7\0\2\1\1\0\1\1\1\0\6\1\2\0\2\1"+
    "\1\0\1\1\3\0\1\1\1\0\4\1\4\0\1\1"+
    "\1\0\1\1\3\0\2\1\2\0\1\1\1\0\1\1"+
    "\2\0\1\1\3\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\3\1"+
    "\1\0\2\1\2\0\1\1\1\0\3\1\3\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[217];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  SurrealQLLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 22: break;
          case 2:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 23: break;
          case 3:
            { return SurrealQLTypes.OPERATOR;
            }
          // fall through
          case 24: break;
          case 4:
            { return SurrealQLTypes.LPAREN;
            }
          // fall through
          case 25: break;
          case 5:
            { return SurrealQLTypes.RPAREN;
            }
          // fall through
          case 26: break;
          case 6:
            { return SurrealQLTypes.COMMA;
            }
          // fall through
          case 27: break;
          case 7:
            { return SurrealQLTypes.INTEGER;
            }
          // fall through
          case 28: break;
          case 8:
            { return SurrealQLTypes.SEMICOLON;
            }
          // fall through
          case 29: break;
          case 9:
            { return SurrealQLTypes.IDENTIFIER;
            }
          // fall through
          case 30: break;
          case 10:
            { return SurrealQLTypes.LBRACKET;
            }
          // fall through
          case 31: break;
          case 11:
            { return SurrealQLTypes.RBRACKET;
            }
          // fall through
          case 32: break;
          case 12:
            { return SurrealQLTypes.LBRACE;
            }
          // fall through
          case 33: break;
          case 13:
            { return SurrealQLTypes.RBRACE;
            }
          // fall through
          case 34: break;
          case 14:
            { 
            }
          // fall through
          case 35: break;
          case 15:
            { return SurrealQLTypes.STRING;
            }
          // fall through
          case 36: break;
          case 16:
            { return SurrealQLTypes.PARAMETER;
            }
          // fall through
          case 37: break;
          case 17:
            { return SurrealQLTypes.COMMENT;
            }
          // fall through
          case 38: break;
          case 18:
            { yybegin(IN_BLOCK_COMMENT); return SurrealQLTypes.COMMENT;
            }
          // fall through
          case 39: break;
          case 19:
            { yybegin(YYINITIAL);
            }
          // fall through
          case 40: break;
          case 20:
            { return SurrealQLTypes.FLOAT;
            }
          // fall through
          case 41: break;
          case 21:
            { return SurrealQLTypes.KEYWORD;
            }
          // fall through
          case 42: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
